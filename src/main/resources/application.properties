# OpenTelemetry
quarkus.otel.metrics.enabled=true
quarkus.otel.traces.enabled=true

quarkus.application.name=garden-app
# schalte das Konsolen-Logging ein (stdout)

quarkus.log.level=INFO

# write everything to the console (stdout)
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c] (%t) %s%e%n

# if you want structured (JSON) logs instead, enable this instead:
# quarkus.log.console.json.enable=true

# log every HTTP request
quarkus.http.access-log.enabled=true
quarkus.http.access-log.pattern=%h %l %u %t \"%r\" %s %b %D ms

# Updated OTEL endpoints to match your monitoring stack
quarkus.otel.exporter.otlp.traces.endpoint=http://k8s-monitoring-alloy-receiver.monitoring.svc.cluster.local:4317

# Exporter configuration
quarkus.otel.traces.exporter=otlp

# Sampling configuration
quarkus.otel.traces.sampler=always_on
quarkus.otel.bsp.schedule.delay=500
quarkus.otel.bsp.max.export.batch.size=512
quarkus.otel.bsp.export.timeout=30s

# Resource attributes
quarkus.otel.resource.attributes=service.name=garden-app,service.version=1.0.0,deployment.environment=minikube

# Micrometer / Prometheus
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/q/metrics
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.http-client.enabled=true

# application.properties (Devmodus, kein Prod-Config notwendig)
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=demo
quarkus.datasource.password=demo
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/demo
quarkus.hibernate-orm.database.generation=update

quarkus.log.console.enable=false
quarkus.log.console.json.enable=true
